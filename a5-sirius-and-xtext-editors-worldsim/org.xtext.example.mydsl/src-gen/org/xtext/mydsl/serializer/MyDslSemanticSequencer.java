/*
 * generated by Xtext 2.32.0
 */
package org.xtext.mydsl.serializer;

import WorldSim.AnimalSpeciesType;
import WorldSim.BeliefSystem;
import WorldSim.BeliefSystemSheet;
import WorldSim.BeliefSystemType;
import WorldSim.CharacterSheet;
import WorldSim.Coordinate;
import WorldSim.Event;
import WorldSim.EventSheet;
import WorldSim.Location;
import WorldSim.LocationSheet;
import WorldSim.LocationType;
import WorldSim.PlantSpeciesType;
import WorldSim.PoliticalEntity;
import WorldSim.PoliticalEntitySheet;
import WorldSim.Presence;
import WorldSim.PresenceSheet;
import WorldSim.Relationship;
import WorldSim.RelationshipType;
import WorldSim.Root;
import WorldSim.Timeframe;
import WorldSim.Timestamp;
import WorldSim.WorldConcepts;
import WorldSim.WorldSimPackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WorldSimPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WorldSimPackage.ANIMAL_SPECIES_TYPE:
				sequence_AnimalSpeciesType(context, (AnimalSpeciesType) semanticObject); 
				return; 
			case WorldSimPackage.BELIEF_SYSTEM:
				sequence_BeliefSystem(context, (BeliefSystem) semanticObject); 
				return; 
			case WorldSimPackage.BELIEF_SYSTEM_SHEET:
				sequence_BeliefSystemSheet(context, (BeliefSystemSheet) semanticObject); 
				return; 
			case WorldSimPackage.BELIEF_SYSTEM_TYPE:
				sequence_BeliefSystemType(context, (BeliefSystemType) semanticObject); 
				return; 
			case WorldSimPackage.CHARACTER:
				sequence_Character(context, (WorldSim.Character) semanticObject); 
				return; 
			case WorldSimPackage.CHARACTER_SHEET:
				sequence_CharacterSheet(context, (CharacterSheet) semanticObject); 
				return; 
			case WorldSimPackage.COORDINATE:
				sequence_Coordinate(context, (Coordinate) semanticObject); 
				return; 
			case WorldSimPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case WorldSimPackage.EVENT_SHEET:
				sequence_EventSheet(context, (EventSheet) semanticObject); 
				return; 
			case WorldSimPackage.LOCATION:
				sequence_Location(context, (Location) semanticObject); 
				return; 
			case WorldSimPackage.LOCATION_SHEET:
				sequence_LocationSheet(context, (LocationSheet) semanticObject); 
				return; 
			case WorldSimPackage.LOCATION_TYPE:
				sequence_LocationType(context, (LocationType) semanticObject); 
				return; 
			case WorldSimPackage.PLANT_SPECIES_TYPE:
				sequence_PlantSpeciesType(context, (PlantSpeciesType) semanticObject); 
				return; 
			case WorldSimPackage.POLITICAL_ENTITY:
				sequence_PoliticalEntity(context, (PoliticalEntity) semanticObject); 
				return; 
			case WorldSimPackage.POLITICAL_ENTITY_SHEET:
				sequence_PoliticalEntitySheet(context, (PoliticalEntitySheet) semanticObject); 
				return; 
			case WorldSimPackage.PRESENCE:
				sequence_Presence(context, (Presence) semanticObject); 
				return; 
			case WorldSimPackage.PRESENCE_SHEET:
				sequence_PresenceSheet(context, (PresenceSheet) semanticObject); 
				return; 
			case WorldSimPackage.RELATIONSHIP:
				sequence_Relationship(context, (Relationship) semanticObject); 
				return; 
			case WorldSimPackage.RELATIONSHIP_TYPE:
				sequence_RelationshipType(context, (RelationshipType) semanticObject); 
				return; 
			case WorldSimPackage.ROOT:
				sequence_Root(context, (Root) semanticObject); 
				return; 
			case WorldSimPackage.TIMEFRAME:
				sequence_Timeframe(context, (Timeframe) semanticObject); 
				return; 
			case WorldSimPackage.TIMESTAMP:
				sequence_Timestamp(context, (Timestamp) semanticObject); 
				return; 
			case WorldSimPackage.WORLD_CONCEPTS:
				sequence_WorldConcepts(context, (WorldConcepts) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AnimalSpeciesType returns AnimalSpeciesType
	 *
	 * Constraint:
	 *     (name=EString description=EString? (natural_habitat+=[Location|EString] natural_habitat+=[Location|EString]*)?)
	 * </pre>
	 */
	protected void sequence_AnimalSpeciesType(ISerializationContext context, AnimalSpeciesType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BeliefSystemSheet returns BeliefSystemSheet
	 *
	 * Constraint:
	 *     (beliefsystem+=BeliefSystem beliefsystem+=BeliefSystem*)?
	 * </pre>
	 */
	protected void sequence_BeliefSystemSheet(ISerializationContext context, BeliefSystemSheet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BeliefSystemType returns BeliefSystemType
	 *
	 * Constraint:
	 *     (canHaveEvent?='canHaveEvent' name=EString description=EString?)
	 * </pre>
	 */
	protected void sequence_BeliefSystemType(ISerializationContext context, BeliefSystemType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BeliefSystem returns BeliefSystem
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         beliefsystemtype=[BeliefSystemType|EString] 
	 *         (is_believed_by+=[Character|EString] is_believed_by+=[Character|EString]*)? 
	 *         (related_events+=[Event|EString] related_events+=[Event|EString]*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_BeliefSystem(ISerializationContext context, BeliefSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CharacterSheet returns CharacterSheet
	 *
	 * Constraint:
	 *     (character+=Character character+=Character*)?
	 * </pre>
	 */
	protected void sequence_CharacterSheet(ISerializationContext context, CharacterSheet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Character returns Character
	 *
	 * Constraint:
	 *     (
	 *         description=EString? 
	 *         first_name=EString? 
	 *         last_name=EString? 
	 *         occupation=EString? 
	 *         (children+=[Character|EString] children+=[Character|EString]*)? 
	 *         (believes+=[BeliefSystem|EString] believes+=[BeliefSystem|EString]*)? 
	 *         supports=[PoliticalEntity|EString]? 
	 *         animalspeciestype=[AnimalSpeciesType|EString]? 
	 *         birth=Timestamp? 
	 *         death=Timestamp? 
	 *         (relationship+=Relationship relationship+=Relationship*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Character(ISerializationContext context, WorldSim.Character semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Coordinate returns Coordinate
	 *
	 * Constraint:
	 *     (latitude=EDoubleObject longitude=EDoubleObject)
	 * </pre>
	 */
	protected void sequence_Coordinate(ISerializationContext context, Coordinate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WorldSimPackage.Literals.COORDINATE__LATITUDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorldSimPackage.Literals.COORDINATE__LATITUDE));
			if (transientValues.isValueTransient(semanticObject, WorldSimPackage.Literals.COORDINATE__LONGITUDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorldSimPackage.Literals.COORDINATE__LONGITUDE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCoordinateAccess().getLatitudeEDoubleObjectParserRuleCall_3_0(), semanticObject.getLatitude());
		feeder.accept(grammarAccess.getCoordinateAccess().getLongitudeEDoubleObjectParserRuleCall_5_0(), semanticObject.getLongitude());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EventSheet returns EventSheet
	 *
	 * Constraint:
	 *     (event+=Event event+=Event*)?
	 * </pre>
	 */
	protected void sequence_EventSheet(ISerializationContext context, EventSheet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         (location+=[Location|EString] location+=[Location|EString]*)? 
	 *         (presences+=[Presence|EString] presences+=[Presence|EString]*)? 
	 *         (related_beliefs+=[BeliefSystem|EString] related_beliefs+=[BeliefSystem|EString]*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LocationSheet returns LocationSheet
	 *
	 * Constraint:
	 *     (location+=Location location+=Location*)?
	 * </pre>
	 */
	protected void sequence_LocationSheet(ISerializationContext context, LocationSheet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LocationType returns LocationType
	 *
	 * Constraint:
	 *     (name=EString description=EString? (contains+=[LocationType|EString] contains+=[LocationType|EString]*)?)
	 * </pre>
	 */
	protected void sequence_LocationType(ISerializationContext context, LocationType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Location returns Location
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         flag=ImageURL? 
	 *         locationtype=[LocationType|EString] 
	 *         (plants_that_occur+=[PlantSpeciesType|EString] plants_that_occur+=[PlantSpeciesType|EString]*)? 
	 *         (animals_that_occur+=[AnimalSpeciesType|EString] animals_that_occur+=[AnimalSpeciesType|EString]*)? 
	 *         (events+=[Event|EString] events+=[Event|EString]*)? 
	 *         coordinates+=Coordinate 
	 *         coordinates+=Coordinate*
	 *     )
	 * </pre>
	 */
	protected void sequence_Location(ISerializationContext context, Location semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PlantSpeciesType returns PlantSpeciesType
	 *
	 * Constraint:
	 *     (name=EString description=EString? (natural_habitat+=[Location|EString] natural_habitat+=[Location|EString]*)?)
	 * </pre>
	 */
	protected void sequence_PlantSpeciesType(ISerializationContext context, PlantSpeciesType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PoliticalEntitySheet returns PoliticalEntitySheet
	 *
	 * Constraint:
	 *     (politicalentity+=PoliticalEntity politicalentity+=PoliticalEntity*)?
	 * </pre>
	 */
	protected void sequence_PoliticalEntitySheet(ISerializationContext context, PoliticalEntitySheet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PoliticalEntity returns PoliticalEntity
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         (beliefsystem+=[BeliefSystem|EString] beliefsystem+=[BeliefSystem|EString]*)? 
	 *         (members+=[Character|EString] members+=[Character|EString]*)? 
	 *         is_concerned_with+=[Location|EString] 
	 *         is_concerned_with+=[Location|EString]*
	 *     )
	 * </pre>
	 */
	protected void sequence_PoliticalEntity(ISerializationContext context, PoliticalEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PresenceSheet returns PresenceSheet
	 *
	 * Constraint:
	 *     (presence+=Presence presence+=Presence*)?
	 * </pre>
	 */
	protected void sequence_PresenceSheet(ISerializationContext context, PresenceSheet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Presence returns Presence
	 *
	 * Constraint:
	 *     (location=[Location|EString] character=[Character|EString] (event+=[Event|EString] event+=[Event|EString]*)? timeframe=Timeframe)
	 * </pre>
	 */
	protected void sequence_Presence(ISerializationContext context, Presence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RelationshipType returns RelationshipType
	 *
	 * Constraint:
	 *     (name=EString description=EString?)
	 * </pre>
	 */
	protected void sequence_RelationshipType(ISerializationContext context, RelationshipType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Relationship returns Relationship
	 *
	 * Constraint:
	 *     (description=EString? character=[Character|EString] relationshiptype=[RelationshipType|EString])
	 * </pre>
	 */
	protected void sequence_Relationship(ISerializationContext context, Relationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Root returns Root
	 *
	 * Constraint:
	 *     (
	 *         character_sheet=CharacterSheet 
	 *         world_concepts=WorldConcepts 
	 *         location_sheet=LocationSheet? 
	 *         political_entity_sheet=PoliticalEntitySheet 
	 *         belief_system_sheet=BeliefSystemSheet 
	 *         event_sheet=EventSheet 
	 *         presence_sheet=PresenceSheet
	 *     )
	 * </pre>
	 */
	protected void sequence_Root(ISerializationContext context, Root semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Timeframe returns Timeframe
	 *
	 * Constraint:
	 *     (start=Timestamp end=Timestamp)
	 * </pre>
	 */
	protected void sequence_Timeframe(ISerializationContext context, Timeframe semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WorldSimPackage.Literals.TIMEFRAME__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorldSimPackage.Literals.TIMEFRAME__START));
			if (transientValues.isValueTransient(semanticObject, WorldSimPackage.Literals.TIMEFRAME__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WorldSimPackage.Literals.TIMEFRAME__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeframeAccess().getStartTimestampParserRuleCall_3_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getTimeframeAccess().getEndTimestampParserRuleCall_5_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Timestamp returns Timestamp
	 *
	 * Constraint:
	 *     (
	 *         year=EIntegerObject? 
	 *         month=EIntegerObject? 
	 *         day=EIntegerObject? 
	 *         hour=EIntegerObject? 
	 *         minute=EIntegerObject? 
	 *         second=EIntegerObject?
	 *     )
	 * </pre>
	 */
	protected void sequence_Timestamp(ISerializationContext context, Timestamp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WorldConcepts returns WorldConcepts
	 *
	 * Constraint:
	 *     (
	 *         defaultAnimalSpecies=[AnimalSpeciesType|EString] 
	 *         (animalspeciestype+=AnimalSpeciesType animalspeciestype+=AnimalSpeciesType*)? 
	 *         (plantspeciestype+=PlantSpeciesType plantspeciestype+=PlantSpeciesType*)? 
	 *         (locationtype+=LocationType locationtype+=LocationType*)? 
	 *         (beliefsystemtype+=BeliefSystemType beliefsystemtype+=BeliefSystemType*)? 
	 *         (relationshiptype+=RelationshipType relationshiptype+=RelationshipType*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_WorldConcepts(ISerializationContext context, WorldConcepts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
