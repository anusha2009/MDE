/**
 * generated by Xtext 2.32.0
 */
package org.xtext.mydsl.formatting2;

import WorldSim.BeliefSystemSheet;
import WorldSim.CharacterSheet;
import WorldSim.EventSheet;
import WorldSim.LocationSheet;
import WorldSim.PoliticalEntitySheet;
import WorldSim.PresenceSheet;
import WorldSim.Root;
import WorldSim.WorldConcepts;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;

  protected void _format(final Root root, @Extension final IFormattableDocument document) {
    document.<CharacterSheet>format(root.getCharacter_sheet());
    document.<WorldConcepts>format(root.getWorld_concepts());
    document.<LocationSheet>format(root.getLocation_sheet());
    document.<PoliticalEntitySheet>format(root.getPolitical_entity_sheet());
    document.<BeliefSystemSheet>format(root.getBelief_system_sheet());
    document.<EventSheet>format(root.getEvent_sheet());
    document.<PresenceSheet>format(root.getPresence_sheet());
  }

  protected void _format(final CharacterSheet characterSheet, @Extension final IFormattableDocument document) {
    EList<WorldSim.Character> _character = characterSheet.getCharacter();
    for (final WorldSim.Character character : _character) {
      document.<WorldSim.Character>format(character);
    }
  }

  public void format(final Object characterSheet, final IFormattableDocument document) {
    if (characterSheet instanceof XtextResource) {
      _format((XtextResource)characterSheet, document);
      return;
    } else if (characterSheet instanceof CharacterSheet) {
      _format((CharacterSheet)characterSheet, document);
      return;
    } else if (characterSheet instanceof Root) {
      _format((Root)characterSheet, document);
      return;
    } else if (characterSheet instanceof EObject) {
      _format((EObject)characterSheet, document);
      return;
    } else if (characterSheet == null) {
      _format((Void)null, document);
      return;
    } else if (characterSheet != null) {
      _format(characterSheet, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(characterSheet, document).toString());
    }
  }
}
